// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./complaint.db"
}

// client database
model Client {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  firstName   String
  lastName    String
  cnic        String      @unique
  email       String      @unique
  phoneNo     String      @unique
  verified    Boolean     @default(false)
  block       String
  homeNo      Int
  password    String
  token       String?
  complaint   Complaints? @relation(fields: [complaintId], references: [id])
  complaintId String?     @unique
}

// Complaints 
model Complaints {
  id String @id @default(uuid())

  ticketNo Int @unique

  complaintType       ComplaintType     @relation(fields: [complaintTypeId], references: [id])
  complaintDetails    ComplaintDetails  @relation(fields: [complaintDetailsId], references: [id])
  complaintCategory   ComplaintCategory @relation(fields: [complaintCategoryId], references: [id])
  Client              Client[]
  Worker              Worker[]
  complaintStatus     ComplaintStatus   @relation(fields: [complaintStatusId], references: [id])
  complaintStatusId   String            @unique
  complaintTypeId     String            @unique
  complaintDetailsId  String            @unique
  complaintCategoryId String            @unique
}

model ComplaintDetails {
  id                       String  @id @default(uuid())
  complaintDetail          String
  complaintSelectedOptions String?
  isUrgent                 Boolean

  complaintsId String
  Complaints   Complaints[]
}

model ComplaintCategory {
  id         String       @id @default(uuid())
  name       String
  Complaints Complaints[]
}

model ComplaintType {
  id         String       @id @default(uuid())
  type       String
  Complaints Complaints[]
}

model ComplaintStatus {
  id         String       @id @default(uuid())
  whenRaised DateTime     @default(now())
  isResolved Boolean
  isClosed   Boolean
  Complaints Complaints[]
}

// Worker - Staff
model Worker {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  firstName        String
  lastName         String
  cnic             String             @unique
  email            String             @unique
  phoneNo          String             @unique
  password         String
  department       String
  token            String
  complaints       Complaints?        @relation(fields: [complaintsId], references: [id])
  WorkerDepartment WorkerDepartment[]
  complaintsId     String?            @unique
}

model WorkerDepartment {
  id       String @id @default(uuid())
  type     String
  worker   Worker @relation(fields: [workerId], references: [id])
  workerId String
}

// Manager 
model Manager {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  firstName         String
  lastName          String
  cnic              String              @unique
  email             String              @unique
  phoneNo           String              @unique
  password          String
  department        String
  token             String
  ManagerDepartment ManagerDepartment[]
}

model ManagerDepartment {
  id        String  @id @default(uuid())
  type      String
  manger    Manager @relation(fields: [managerId], references: [id])
  managerId String
}

// Head
model Head {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  firstName String
  lastName  String
  cnic      String   @unique
  email     String   @unique
  phoneNo   String   @unique
  password  String
  token     String
}

// enum Role {
//   CLIENT
//   WORKER
//   MANAGER
//   HEAD
// }
